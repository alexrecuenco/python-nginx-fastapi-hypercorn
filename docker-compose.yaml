version: "3"
services:
  # echo-backend:
  #   image: node:21-alpine3.18
  #   command: ["/app/echo.js"]
  #   volumes:
  #     # For quickly doing this, map code
  #     - ./echo.js:/app/echo.js:ro
  #   expose:
  #     - "8000"
  #   ports:
  #     - "8000:8000"
  #   # ports:
  #   #   - "8000:8000"
  #   #      ^_______^ This maps to host, which ew don't need when running
  backend:
    build:
      context: ./backend
      target: prod
    volumes:
      # For quickly doing this, map code
      - ./backend:/app/
      - uploads:/www/uploads:ro
      - downloads:/www/downloads:rw
    # expose:
    #   - "8000"
    ports:
      - "8000:8000"
    #      ^_______^ This maps to host, which ew don't need when running

  frontend:
    image: andarius/nginx-upload:1.22-alpine
    volumes:
      - uploads:/www/uploads:rw
      - downloads:/www/downloads:ro
      - ./server/shared:/www/share:ro
      # - ./server/shared:/www/share/nginx/html:ro
      - ./server/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./server/conf.d:/etc/nginx/conf.d/:ro
    ports:
      # https://docs.docker.com/compose/compose-file/compose-file-v3/#long-syntax-1
      - target: 80
        published: 8080
        protocol: tcp
        mode: ingress
    depends_on:
      - init-script
  init-script:
    image: andarius/nginx-upload:1.22-alpine
    entrypoint: ["/bin/sh"]
    command: ["/app/init.sh"]
    # user: nginx:www-data
    volumes:
      - uploads:/www/uploads:rw
      - ./server/init.sh:/app/init.sh

volumes:
  uploads:
    # Define the volume for file uploads
  downloads:
    # Define the volume for file uploads
